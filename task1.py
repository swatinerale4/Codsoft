# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CPIb6bAvqQmDErGjUujFLLDUrTmzU5NV
"""

# Step 1: Import required libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score, classification_report

# Step 2: Create a sample dataset
data = {
    'plot': [
        "A young boy discovers he has magical powers and attends a wizard school.",
        "A group of friends plan a heist to steal gold from a bank.",
        "Two lovers fight for their relationship against all odds.",
        "An astronaut becomes stranded on Mars and must survive alone.",
        "A detective investigates a mysterious murder in a small town.",
        "A superhero saves the world from alien invasion.",
        "A young woman follows her dreams to become a dancer.",
        "A robot learns to feel emotions and become human-like."
    ],
    'genre': [
        "Fantasy", "Action", "Romance", "Sci-Fi", "Thriller", "Action", "Drama", "Sci-Fi"
    ]
}
df = pd.DataFrame(data)

# Step 3: Clean and prepare text data
df['plot'] = df['plot'].str.lower().str.strip()

# Step 4: Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    df['plot'], df['genre'], test_size=0.3, random_state=42
)

# Step 5: Convert text into TF-IDF vectors
tfidf = TfidfVectorizer(stop_words='english')
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# Step 5: Convert text into TF-IDF vectors
tfidf = TfidfVectorizer(stop_words='english')
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# Step 6: Train Naive Bayes model
nb_model = MultinomialNB()
nb_model.fit(X_train_tfidf, y_train)
nb_pred = nb_model.predict(X_test_tfidf)

# Step 7: Train Logistic Regression model
lr_model = LogisticRegression(max_iter=1000)
lr_model.fit(X_train_tfidf, y_train)
lr_pred = lr_model.predict(X_test_tfidf)

# Step 8: Train Support Vector Machine (SVM) model
svm_model = LinearSVC()
svm_model.fit(X_train_tfidf, y_train)
svm_pred = svm_model.predict(X_test_tfidf)

# Step 9: Evaluate model performance
print("Naive Bayes Accuracy:", accuracy_score(y_test, nb_pred))
print("Logistic Regression Accuracy:", accuracy_score(y_test, lr_pred))
print("SVM Accuracy:", accuracy_score(y_test, svm_pred))
print("\nClassification Report (SVM):\n", classification_report(y_test, svm_pred))

# Step 10: Predict genre for a new movie plot
new_plot = ["A young man travels through space to save the galaxy."]
new_plot_tfidf = tfidf.transform(new_plot)
predicted_genre = svm_model.predict(new_plot_tfidf)
print("\nðŸŽ¬ Predicted Genre:", predicted_genre[0])