# -*- coding: utf-8 -*-
"""Task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qb2LJ3OHIw42ajdT_yuNI6bXY4stJH3k
"""

# Step 1: Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score

# Step 2: Create or load dataset
# (You can replace this with pd.read_csv("customer_churn.csv"))
from sklearn.datasets import make_classification
X, y = make_classification(n_samples=5000, n_features=10, n_informative=6,
                           n_redundant=2, random_state=42, weights=[0.8, 0.2])
df = pd.DataFrame(X, columns=['Feature_'+str(i) for i in range(1, 11)])
df['Churn'] = y

# Step 3: Separate features and target
X = df.drop(columns=['Churn'])
y = df['Churn']

# Step 4: Split dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, stratify=y, random_state=42)

# Step 5: Standardize feature data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 6: Define models
models = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "Gradient Boosting": GradientBoostingClassifier(n_estimators=100, random_state=42)
}

# Step 7: Train models
for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    print(f"{name} trained successfully")

# Step 8: Evaluate each model
for name, model in models.items():
    y_pred = model.predict(X_test_scaled)
    y_proba = model.predict_proba(X_test_scaled)[:, 1]
    print(f"\n--- {name} ---")
    print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))
    print("ROC AUC Score:", roc_auc_score(y_test, y_proba))

# Step 9: Compare AUC scores
auc_scores = {name: roc_auc_score(y_test, model.predict_proba(X_test_scaled)[:, 1])
              for name, model in models.items()}
print("\nModel Comparison (AUC Scores):")
for model, score in auc_scores.items():
    print(f"{model}: {score:.4f}")

# Step 10: Predict churn for a new customer (example)
new_customer = X_test_scaled[0].reshape(1, -1)
prediction = models["Gradient Boosting"].predict(new_customer)
print("\nPrediction for new customer (1 = Churn, 0 = Retained):", prediction[0])