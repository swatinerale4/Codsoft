# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DFZwGALfQI04Yncr0AfK6vAFimsmkjhv
"""

# Step 1: Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score

# Step 2: Load dataset (use your local 'creditcard.csv' if available)
try:
    df = pd.read_csv("creditcard.csv")   # has column 'Class' where 1 = Fraud, 0 = Normal
except:
    # Create synthetic data if not available
    from sklearn.datasets import make_classification
    X, y = make_classification(n_samples=20000, n_features=30, n_informative=10,
                               n_redundant=10, weights=[0.995, 0.005], random_state=42)
    df = pd.DataFrame(X)
    df['Class'] = y

# Step 3: Separate features and target
X = df.drop(columns=['Class'])
y = df['Class']

# Step 4: Split dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, stratify=y, random_state=42)

# Step 5: Normalize (scale) the feature data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 6: Define models
models = {
    "Logistic Regression": LogisticRegression(max_iter=1000, class_weight='balanced'),
    "Decision Tree": DecisionTreeClassifier(max_depth=8, class_weight='balanced'),
    "Random Forest": RandomForestClassifier(n_estimators=100, max_depth=10, class_weight='balanced')
}

# Step 7: Train models
for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    print(f"\n{name} Model Trained")

# Step 8: Evaluate models on test data
for name, model in models.items():
    y_pred = model.predict(X_test_scaled)
    y_proba = model.predict_proba(X_test_scaled)[:,1]
    print(f"\n--- {name} ---")
    print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))
    print("ROC AUC Score:", roc_auc_score(y_test, y_proba))

# Step 9: Compare models based on AUC score
auc_scores = {name: roc_auc_score(y_test, model.predict_proba(X_test_scaled)[:,1])
              for name, model in models.items()}
print("\nModel AUC Comparison:")
for model, score in auc_scores.items():
    print(f"{model}: {score:.4f}")

# Step 10: Predict new transactions (example)
sample = X_test_scaled[0].reshape(1, -1)
prediction = models["Random Forest"].predict(sample)
print("\nPrediction for a sample transaction (1=Fraud, 0=Normal):", prediction[0])